{{define "vmUsage" -}}
An interface into the Tenable.io API using Go!

Version {{.ReleaseVersion}} {{.GitHash}}

{{- Gopher }}
Find more information at:
    https://github.com/whereiskurt/tiogo/

Usage:
    tio [SUBCOMMAND] [ACTION ...] [OPTIONS]

Sub-commands:
    help, scanners, agents, agent-groups, export-vulns, (#TODO: scans)

VM Options:
    Selection modifiers:
      --id=[unique id]
      --name=[string]
      --regex=[regular expression]
      --jqex=[jq expression]

Output Modes:
      --csv   Set table outputs to comma separated files [ie. good for Excel + Splunk, etc.]
      --json  Set table outputs to JSON [ie. good for integrations and jq manipulations.]

VM Actions and Examples:
    $ tio vm help agents
    $ tio vm help agent-groups
    $ tio vm help scanners
    $ tio vm help export-vulns
    $ tio vm help export-assets

{{end}}

{{define "exportVulnsUsage"}}
Bulk Exports of Vulnerabilities
https://developer.tenable.com/reference#exports

Usage:
    tio vm export-vulns [ACTION ...] [OPTIONS]

Action:
    start, status, get, query

Export Vulns Options:
    Selection modifiers:
    --uuid=[unique id]
    --jqex=[jq expression]
    --chunk=[chunk to get, defaults: ALL]
    --critical, --high, --med[ium], --info  [severity to match for vulnerability]
    --after=[YYYY-MM-DD HH:MM:SS +/-0000 TZ] [date boundaries, or set 'days']
    --days=[number of days to go back to, instead of defining 'after']

Output Modes:
    --json  Set table outputs to JSON [ie. good for integrations and jq manipulations.]

Examples:
    $ tio vm export-vulns start
    $ tio vm export-vulns start --after="2019-01-01" --crit
    $ tio vm export-vulns start --after="2019-01-01 00:00:00 -0400 EDT" --high,med,info
    $ tio vm export-vulns start --days=31 --critical --high

    $ tio vm export-vulns status
    $ tio vm export-vulns get
    $ tio vm export-vulns query --jqex="[.asset.ipv4, .asset.operating_system[0]]"
{{end}}


{{define "ExportVulnsStart"}}
Successfully started vulnerability export uuid='{{.ExportUUID}}'

Retrieving vulnerabilities since date of '{{.Since}}'

To review the status for 'FINISHED' and then get the export chunks:

    ## Check the status of the chunk file creation:
    $ tio vm export-vulns status --uuid={{.ExportUUID}}

    ## Retrieve all chunk files. NOTE: Fails unless status is 'FINISHED'
    $ tio vm export-vulns get --uuid={{.ExportUUID}}

{{end}}

{{define "ExportAssetsStart"}}
Successfully started asset export uuid='{{.ExportUUID}}'

To review the status for 'FINISHED' and then get the export chunks:

    ## Check the status of the chunk file creation:
    $ tio vm export-assets status --uuid={{.ExportUUID}}

    ## Retrieve all chunk files. NOTE: Fails unless status is 'FINISHED'
    $ tio vm export-assets get --uuid={{.ExportUUID}}
{{end}}


{{define "ExportVulnsStatus"}}
Requested vulns status for uuid='{{.ExportUUID}}'.
{{if eq .Status "FINISHED"}}
Export status is "FINISHED"! You can retrieve the chunks:
{{else}}
Export status is currently '{{.Status}}', once it becomes 'FINISHED' you can get the chunks:
{{- end}}
    ## Retrieve all of the chunks. NOTE: Fails unless status is 'FINISHED'
    $ tio vm export-vulns get --uuid={{.ExportUUID}}

    ## Retrieve FINISHED chunks 1,2,3. NOTE: Fails unless status is 'FINISHED'
    $ tio vm export-vulns get --uuid={{.ExportUUID}} --chunk=1,2,3
{{end}}

{{define "ExportAssetsStatus"}}
Requested asset status for uuid='{{.ExportUUID}}'.
{{if eq .Status "FINISHED"}}
Export status is "FINISHED"! You can retrieve the chunks:
{{else}}
Export status is currently '{{.Status}}', once it becomes 'FINISHED' you can get the chunks:
{{- end}}
    ## Retrieve all of the chunks. NOTE: Fails unless status is 'FINISHED'
    $ tio vm export-assets get --uuid={{.ExportUUID}}

    ## Retrieve FINISHED chunks 1,2,3. NOTE: Fails unless status is 'FINISHED'
    $ tio vm export-assets get --uuid={{.ExportUUID}} --chunk=1,2,3
{{end}}

{{define "ExportVulnsGet"}}
Successfully retrieved chunks='{{.Chunks}} for uuid='{{.ExportUUID}}'.

Options modifiers:
    --uuid=[unique id]
    --jqex=[jq expression]
    --chunk=[chunk to get]

    --critical, --high, --medium, --info [severity to match for vulnerability]
    --before,--after=[YYYY-MM-DD of date boundaries]
    --days=[number of days to bound query to, can be used with either 'before' or 'after']

Examples:
    ## Query
    ##Output all of the contents of the chunks as JSON
    $ tio vm export-vulns query --uuid='{{.ExportUUID}}' --jqex=".[]"

    ##Output all of the contents of the chunks as JSON
    $ tio vm export-vulns query --uuid='{{.ExportUUID}}' --jqex=".[]" --chunk=1,2

    $ tio vm export-vulns query --uuid='{{.ExportUUID}}' --critical --high --medium --days=45
    $ tio vm export-vulns query --uuid='{{.ExportUUID}}' --critical --days=30

    ## These three examples all produce the same results -- 15 day time boxes
    ## Everything after 2019-01-01 and before 2019-01-15
    $ tio vm export-vulns query --uuid='{{.ExportUUID}}' --critical --high --after 2019-01-01 --before 2019-01-15
    $ tio vm export-vulns query --uuid='{{.ExportUUID}}' --critical --high --after 2019-01-01 --days=15
    $ tio vm export-vulns query --uuid='{{.ExportUUID}}' --critical --high --before 2019-01-15 --days=15   

{{end}}
{{define "ExportAssetsGet"}}
Successfully retrieved chunks='{{.Chunks}} for uuid='{{.ExportUUID}}'.

Options modifiers:
    --uuid=[unique id]
    --jqex=[jq expression]
    --chunk=[chunk to get]

Examples:
    ##Output all of the contents of the chunks as JSON
    $ tio vm export-assets query --uuid='{{.ExportUUID}}' --jqex=".[]"

    ##Output all of the contents of the chunks as JSON
    $ tio vm export-assets query --uuid='{{.ExportUUID}}' --jqex=".[]" --chunk=1,2

{{end}}


{{define "scannersUsage"}}
Scanners conduct network based scanning and report results back to Tenable.io.
https://developer.tenable.com/reference#scanners

Usage:
    tio vm scanners [ACTION ...] [OPTIONS]

Action:
    list

Scanners Options:
    Selection modifiers:
    --id=[unique id]
    --name=[string]
    --regex=[regular expression]
    --jqex=[jq expression]

Output Modes:
    --csv   Set table outputs to comma separated files [ie. good for Excel + Splunk, etc.]
    --json  Set table outputs to JSON [ie. good for integrations and jq manipulations.]

Examples:
    $ tio scanners
    $ tio vm scanners
    $ tio vm scanners list
    $ tio vm scanners list --csv
    $ tio vm scanners list --json
    $ tio vm scanners list --regex '.*PROD[0-9][0-9]?.*'
{{end}}

{{define "agentsUsage" -}}
Agents are software installed on hosts that execute local host scans and report back to Tenable.io
    https://developer.tenable.com/reference#agents

Usage:
    tio vm agents [ACTION ...] [OPTIONS]

Action:
    list, group, ungroup

Agents Options:
    Selection modifiers:
      --id=[unique id]
      --name=[string]
      --regex=[regular expression]
      --jqex=[jq expression]

    Output Modes:
      --csv   Set table outputs to comma separated files [ie. good for Excel + Splunk, etc.]
      --json  Set table outputs to JSON [ie. good for integrations and jq manipulations.]

    Examples:
      $ tio agents
      $ tio agents list --without-group
      $ tio agents list --group "New Group Name"
      $ tio agents list --regex "New Group .+"

      ## Group and Ungroup Agents into Agent Groups
      $ tio agents group --group "New Group Name" --regex "10\.0\.2\"
      $ tio agents ungroup --group "New Group Name"
{{end}}

{{define "agentGroupsUsage"}}
Agents are put into Groups and used for the purposes of Agent Scans.
(https://cloud.tenable.com/api/#/resources/agent-groups)

Usage:
    tio vm agent-groups [ACTION ...] [OPTIONS]

Action:
    list, (TODO: create, delete)

Agents Options:
    Selection modifiers:
      --id=[unique id]
      --name=[string]
      --regex=[regular expression]
      --jqex=[jq expression]

    Output Modes:
      --csv   Set table outputs to comma separated files [ie. good for Excel + Splunk, etc.]
      --json  Set table outputs to JSON [ie. good for integrations and jq manipulations.]

    Examples:
      $ tio vm agent-groups list
      $ tio agent-groups

      ## TODO: Implement create, delete, and --as-target-groups
      $ tio vm agent-groups create --name "Agent Group #Y"
      $ tio vm agent-groups delete --name "Agent Group #Y"

      ## Output IP addresses of Agents to so we can create Target Groups
      $ tio vm agent-groups list --as-target-groups --size=16
{{end}}